{"version":3,"sources":["../domain/enums/tileStatusEnum.ts","../domain/enums/tileSignEnum.ts","../domain/enums/index.ts","../domain/entities/rulesSet.ts","../domain/entities/rulesForNeighbourCounts.ts","../domain/exceptions/domainException.ts","../domain/exceptions/invalidLandscapeSizeException.ts","../domain/exceptions/invalidLandscapeCoordinates.ts","../domain/exceptions/index.ts","../domain/valueObjects/landscapeSize.ts","../domain/valueObjects/landscapeCoordinates.ts","../domain/valueObjects/index.ts","../domain/entities/landscape.ts","../domain/entities/index.ts","../domain/factories/ruleSetFactory.ts","../domain/factories/landscapeFactory.ts","../domain/factories/index.ts","../domain/services/generateNextLandscapeService.ts","../domain/services/index.ts","script.ts"],"names":[],"mappings":";;;;;ACAA,ADAA,ICAK,ADAA,YCAL,EDAA;AmBCA,IAAA,WAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AlBDA,ADAA,CCAA,ADAA,UCAK,ADAA,YCAL,EAAiB,ADAjB,EAAmB;ACCjB,ADAA,AmBCF,ElBDE,ADAA,EmBCF,UlBDE,AkBCF,ClBDE,CDAA,CAAA,AmBCF,KlBDE,CAAA,CDAA,AmBCF,CnBDE,AmBCF,ClBDE,EDAA,CCAA,MDAA,OmBCF,CAAA;AlBAE,ADAA,ECAA,ADAA,YCAA,CAAA,CDAA,CAAA,ICAA,CAAA,CDAA,CAAA,CCAA,EDAA,KCAA,CDAA;ACCD,ADAA,AmBAD,ClBHA,ADAA,ECAK,ADAA,CmBGL,WlBHiB,EDAE,CmBGnB,ElBHK,CkBGL,CnBHK,MmBGL,CAAA,GlBHiB,GAAA,CDAE,CCAF,CAAjB,CDAmB,EAAA,CAAnB,QmBGA,CAAA;;AhBHA,AFKA,ADDA,AeJA,ADAA,AGCA,APDA,ADAA,AUKA,IfSqB,ADdrB,AYAA,ADAA,AGCA,APDA,ADAA,AUKM,GlBAN,ADDA,CCCA,ADDA,EmBCY,ChBLZ,AcCA,EEIe,ChBLf,AYAA,ADAA,AGCA,ChBIA,ADDA,CUJA,ADAA,CMAA,ADAA,CbKe,ADDA,CUJf,ADAA,ENAA,AcCA,CdDA,AcCA,AEIM,EJLN,ADAA,CCAA,ADAA,CJAA,ADAA,CCAA,ADAA,CUKe,ElBAf,CkBA0B,CnBD1B,IGJA,AcCA,CdDA,AcCA,KFDA,ADAA,CCAA,ADAA,GJAA,ADAA,CCAA,ADAA;AIAA,ATiBE,AFjBF,AMAA,AQAA,AEAA,APAA,AQME,INNF,AXAA,AMAA,AQAA,AEAA,APAA,EQMQ,QNNR,GAAA,EFAA,CTAA,AcAA,AGMsB,CXNtB,CGAA,CTAA,AcAA,AGMyB,CXNzB,CWME,ONNF,CAAA,CKAA,CdiBc,EcjBd,APAA,CTAA,AcAA,ALAA,CTAA,AMAA,AQAA,CHAA,ATiBE,AIjBF,CKAA,CTiBsD,GOjBtD,CTAA,AcAA,ALAA,CTAA,AMAA,AQAA,CRAA,IUAA,CLAA,AKAA,CLAA,CAAA,KKAA,CAAA,EPAA,CAAA,CTAA,AcAA,ALAA,CTAA,AcAA,CdAA,AMAA,AQAA,CRAA,CAAA,wBUAA,CAAA,CAAA;AdiBsD,AWhBtD,ADAA,AKME,IhBCmB,AYPrB,ADAA,AGaqB,APFA,ADLA,EUAb,KJNR,ADAA,GCAA,ADAA,MKMsB,CJNtB,ADAA,CCAA,ADAA,CKMyB,IAAI,SJN7B,ADAA,CCAA,ADAA,CKM6B,CAAA,cAAJ,EAAvB;ANHO,AVOP,ADRO,AMEP,AQFO,ACeP,AChBO,APCA,ADaP,ADLA,AUHA,MAAM,CNJC,AXDA,AMEP,AQFO,AEDA,APCA,CECA,AXDA,AMEP,AQFO,AEDA,APCA,OECA,GAJF,CVWO,EQRL,CTAA,AcAA,AGKe,CXHtB,CLMA,AQXK,CTAA,AcAA,APWO,AUHa,ChBGW,AKX/B,EKAA,CAAA,AJWL,AUH6B,EVGM,CCKvB,IGZL,AHYP,CQdO,CRcmC,CChBrC,COAA,APAA,AQQwB,CjBRxB,AcAA,ACkBO,AEViB,CjBRxB,AcAA,CRAA,CAAA,CSkBL,EAAmD,ANf5C,ETAA,AcAA,EREP,MWGyB,EAAzB,WDRK,CAAA,OAEE;AdgBL,ADPkC,AYTtC,AEgBqD,APFT,ADLP,AUFnC,IJPF,ADCqB,EKMb,GfSC,MAAL,GAAc,AWhBlB,GAAA,CXgBsB,GAAJ,EAAd,CWhBJ,CAAA,KIOoC,GAAG,IAAI,SJP3C,CAAA,AIO2C,CAAA,6BAAJ,CAAkC;ANRzE,AXAA,AMAA,AQAA,ALAA,AQSI,INTJ,AXAA,AMAA,AQAA,ALAA,AQSI,OAAO,EAAE,KjBTb,GAAA,CcAA,GAAA,CLAA,CQS2B,CAAC,CNT5B,AFAA,GEAA,GLAA,CNAA,CAAA,CMAA,EQAA,AGSa,CHTb,CGQyE,EjBRzE,ASAA,CTAA,ASAA,EEAA,CAAA,AGAA,CAAA,GLAA,CHAA,AGAA,CHAA,CKAA,CAAA,KXAA,AMAA,CNAA,AMAA,CNAA,McAA,CAAA,CAAA,MLAA,CAAA,CAAA,IEAA,CAAA,CAAA,ULAA,CAAA,CAAA;AIAA,ARkBI,ADPA,AcOA,APFA,ADLA,AUDA,IPVJ,AGoBqB,AIVjB,KfQK,ADPA,AcOA,APFA,ADLA,MLOL,ADPA,AcOA,CLlBJ,ARkBgB,EDPE,AcOA,APFd,ADLA,CGXJ,ARkBI,AMFe,ADLA,CLOC,AeRA,CfQhB,CDPkB,AcOA,AERA,CfQC,AaAA,APFnB,ADLmB,CAAC,CNAN,AMAd,CGXJ,CAAA,ATWI,AMAuB,CLOC,CAAC,CaAzB,CRP2B,CAAC,CLO5B,AKPA,aGXJ,CAAA;ACGkB,AXDO,AMGvB,AQHuB,ACiBrB,ANjBoB,AQMiD,GAAlC,CAArC,GNLgB,AXDO,AMGvB,AQHuB,ALAD,CECN,AXDO,AMGvB,AQHuB,ALAD,CMiBf,WfjBgB,GAFlB,CcEkB,ECiBrB,CDnBG,CLEiB,CMiBK,EJhBX,AFHX,EMmB0B,CJnB1B,AImB2B,GfnB3B,AMKL,CNLK,EMAA,KNEkB,AcFlB,CAAA,ICmBH,GDjBqB,ALFlB,CAAA,KEAA,CAAA,CFEiB,MECN,ILHX,CAAA,OAKL;AIJF,ARkBI,ADPA,AcQD,APHC,ADLA,AUAF,IPXF,EOWQ,GfOC,ADPA,AOKA,ADLA,ECKL,ADLA,GCKU,ADLA,CLOV,ADPA,CCOY,ADPA,ESXhB,AFgBkB,ADLA,CLOd,ADPA,AOKe,ADLA,AUAE,CfOD,ADPA,AMAhB,CGXJ,ARkBI,CePoB,CfOD,IDPH,CSXpB,ARkB4B,ADPR,CSXpB,ARkB6B,CMFf,CAAiB,CNE3B,AMFA,MSLoC,EAAtC,EhBAkB,CAAe,KAA/B,ESXJ,ATW0C,CSX1C,ITW+C,CAAC,YAA5C;AUXJ,ALAA,AEiBI,ADLA,AUAF,INZF,ALAA,EWYQ,GTKC,ADLA,ECKL,ADLA,GCKU,ADLA,CIZd,GAAA,AHiBkB,ADLA,CCKC,ADLA,CAAf,EUAoB,GAAG,KTKb,CAAiB,CAA3B,CGjBJ,ALAA,CKAA,ELAA,KKAA,AMY2C,CNZ3C,AMY4C,SXZ5C,CAAA,AWY2B,CAA4B,ENZvD,CAAA,CAAA,ELAA,CAAA,+BAAA,CAAA,CAAA;AJmBI,ADPA,AOMD,ADLA,AUAC,IPFiB,AOEjB,IAAI,CfMC,ADPA,CgBCC,KfMN,ADPA,CCOY,ADPA,GCOZ,ADPA,CCOgB,ADPA,CCOhB,EAAmB,IDPH,CCOQ,ADPR,CCOS,GAAzB,UDPgB,CAAe,IAA/B,EAAqC,KAAK,CAAC,UAA3C;AUVuC,ADazC,ATFC,AKRD,AWQU,MAAA,CNX+B,ALGzC,AWQW,CNX8B,ALGzC,CWQa,ELXb,MDAyC,GAFpC,CDeO,COFc,CAAC,CAAnB,CPER,EAA+B,ICf1B,CAAA,GCEO,IDA6B,KLGzC,GALK,6BAAA,CAAA,OAKL;AIU+B,ARK7B,AUjBA,AKU4B,MAAA,CAAC,EfOxB,AeP0B,EFO1B,EHjBE,EViBP,CAAY,CUjBD,EViBX,CAAgB,CAAhB,CeP4C,CfOzB,AeP0B,ILVlC,CViBa,AUjBb,AGiBE,CbAY,KAAzB,CUjBO,CAAY,IGiBd,EAA+B;AHhBlC,AGiBF,AERM,QLTJ,EGiBI,CFDD,KECO,GAAqB,CHjBnB,CGiBd,CHjBgB,ICgBL,ADhBS,ICgBf,EAAqB,IDhBN,CAAA,uBAAJ,CAA4B;AFY5C,ARKA,AWAA,ADhBI,AKO+C,GAA5B,CAAzB,KPIO,ARKA,AMDP,ADLA,CMMQ,ADhBF,IAAI,CVgBR,CQLA,ARKY,AUhBF,GFWK,ARKf,CAAgB,AWAA,CXAhB,EQLmB,ARKA,AWAA,ADhBT,CFWU,AEXV,AJeA,ADLA,ILMc,CAAC,CQLzB,EGKM,CXAN,KUhBU,CAAe,GCgBN,CDjByB;AFa7C,AGIoB,ADff,AGgBJ,APDA,ADLA,UKVI,CXQN,AcQO,EHhBE,AJeA,ADLA,EMKkB,ADfhB,AGgBA,CAAC,EPDE,ADLA,CQMC,CAAb,APDA,ADLA,EMKyB,ADfhB,AGgBO,CFDS,ADfhB,AGgBQ,GAAG,SFDK,CAAa,CZNtC,AWTS,CAAe,AGgBQ,CAAC,CFDd,EDjByB,GGkB5C,EAAyC,CAAC,EAA1C,CdRF,CcQgD,CdN9C,eAFF,EAEyB;ACMvB,ADJA,AGpBJ,ASuBuB,ADdf,AGgBF,APDH,ADLA,AUDD,IblBF,EakBQ,CJKJ,EXCK,CDJC,AWXF,EGgBI,CHhBD,EVeP,AUfS,AKSI,CfMD,AExBhB,AWyBgB,EEPI,CfMhB,AExBJ,AWyBmB,CbDC,CAAhB,AaCE,CHhBO,CVeU,AUfV,CXWW,EGpBxB,CHoB2B,AGpB3B,AakBQ,CfMoB,CAAC,GDJG,CCI5B,GeNgB,CLTP,AKSQ,ChBEM,AWXC,CXWW,GAAZ,CACrB,AWf0C,GRNhD,AakBoB,CblBpB,CakB6C,ShBElB,CAAvB;AWVI,AKSJ,IAAA,KAAK,CLTD,AKSE,KLTG,EAAE,EKSI,CAAC,ILTL,CAAA,CKSN,CAAL,YLTW,CAAe,KAJkB;AVmB5C,ADFA,AYCA,ADbI,AGeF,AENF,IblBiB,IakBX,CfKD,CUdD,GXYG,AYCA,AEEA,CHfC,CVcR,CAAY,AUdF,CGeC,CFFC,AEEA,CbDZ,CAAgB,CAAhB,AaCe,AENI,CFMjB,CbDiB,AUdT,CAAA,AGeQ,AENI,CFMH,EdHE,AYCd,CXCiB,ADFF,AYCA,AEEA,CbDG,EDFlB,CCEP,ADF0B,MWZhB,CAAe,CGeS,CAAC,EHpBS,GGoB1C,CdHK,CAAP,AcG0C,CAAC,EAAzC,CENgD,CFMH,AENI,OAA7B,CAAqC,SAArC,CAAtB;AhBID,AYAyB,ADZpB,AGeA,AENJ,IAAA,IJGwB,CHH1B,AFIA,ADJA,CKTM,ECYwB,EAAE,ADZtB,AGeE,AENA,CAAC,CLTD,ECYwB,AEGpB,CFHqB,EEGlB,EFHK,ADZZ,CFSK,AETL,AJaA,ADJA,EQMY,CENN,WLTN,CAAe,CGeR,CAAoB,EHrBO;AFgB5C,ARIA,AWFyC,ADXrC,AGeE,APFN,ADJA,AUAE,MAAA,EJEuC,CXEpC,CUbD,EGeE,CLNC,AETA,AJaA,ADJA,ELIP,AUbS,AKSE,CfIC,AeJA,EPAA,AGEuC,ALEvC,ADJA,CLIZ,CAAgB,AWFqC,ALErD,ADJA,CLIA,CUbS,CVaU,AUbV,AGeQ,ELNV,AKMY,CLNC,ERII,CAAC,AeJd,CAAT,EPAF,ERIA,GUbS,CAAe,IAPoB;AFiB7C,AGCuB,ADVlB,AGciB,APDtB,ADJA,AUAE,KAFS,EJGH,AIDJ,CJCH,EDVI,IGciB,CHdZ,AGca,EHdX,AGca,CAAL,GEPT,CAAV,ELPW,CAAA,cAAA,CAAe,IARkB;AVqB5C,AG3BJ,AQyBG,ADVK,AGauB,AEJ5B,GAND,CdlBmB,AEArB,KH2BS,CUZD,IGauB,CbD3B,AUZS,AGamB,CbDhB,CUZD,AGamB,EbD9B,CAAgB,CAAhB,AG3BJ,EH2BuB,CG3BvB,AOee,CAAA,GVYa,CAAC,KAAzB,KG3BJ,AOee,CPff,AOe8B,OPf9B,CAAA,mBAAA,CAAA,CAAA;AH4BG,AEzBD,AQG8C,AGsBzB,SHtBH,CADG,GGsBkB,4BXxB3B,CAAZ,EAAuB,CAAvB,EAAgC;AAAA,AQc5B,AGYI,AEHR,EAAA,EZxBmB,IOef,CFOJ,EFKO,ADJC,AUCC,CFGD,AEHE,MLTI,EAAE,IFOA,AEPI,AGYA,EAAE,CPAR,CSHL,CAAT,CVDkB,CAAV,EAAqB,CKRT,ALQZ,CKRY,CLQkB,WCI/B,EAAiD,SIZxC,CAA4B;AFQ1C,ATjBJ,AWUQ,AGSiC,APGrC,ADJA,AUCH,CAtBD,MhBGA,CAAA,EWUQ,ALQA,CMCC,AEAY,ARDZ,CQCD,CLFG,AFML,CIbM,CXVZ,CWUc,ALQA,EGDE,ATjBhB,KWUc,CAAA,ALQL,CGDE,ATjBX,AMkBuB,CGDC,AHCf,CGDE,AHCH,EGDmB,EGEP,ANDS,CAAC,CCKJ,CAAC,CENvB,AGEK,ALIH,EKJkC,ANDL,CKRrB,CAAe,CJaI,GIda,EJcR,ADLR,CCKxB,ADLsC,CAAd,CAA1B,ECKuC,ADLK,oBCKe,CAAC,CAArB,KAA2B,KAAK,CADvE;AEJD,ANtBC,ASwBA,ADTI,AJcL,ADNG,QHvBI,ESwBA,ADTF,GAAG,CLQC,CHvBK,AQeJ,GLQG,IKRH,CCSU,ADTV,GCSa,CAAC,GNDX,CAAA,GMCW,CAAA,EDTd,CAAe,IAFkB,KCWnB,CAAa,KAAd,EAAqB,ETxBK,CAAnC,EGuBL,CAAkC,CMCC,ANDnC,CMCmC,CNDE,CAArC,CAAN,SMCyC,CTxBc,ASwBD,CTxB3C,CAAb,ESwBsB,CAAtB;ATzB8B,AQiB1B,AGWA,ARHH,AUCL,IAAM,MLTE,AGWA,CbDN,EUVS,CGWC,CHXC,AGWA,IAAL,CAAU,AEFI,ELTT,CAAA,AKSY,CfCnB,AaCE,KX1BE,GawBJ,Ib1B4B,CQiBrB,CAAe,CVU1B,EAA2B,CUbiB,MKYrB,GAAoB;AfEzC,AEzBD,ASuBC,ADRI,AGWD,ARHJ,AUCD,MAAM,IJDE,ADRF,GVUG,AeDI,ELTF,CKSK,CLTH,CVUC,EWFI,GAAG,CXEZ,AUVI,AKSW,CfCH,AUVR,AKSY,GfChB,CAAgB,GWFjB,ODRK,CAAe,AKS5B,EJDqB,EXEZ,CAAP,AUd0C;AVe3C,AWHoB,ADPf,AKSN,MAAM,GPHN,CENM,AKSI,CTIF,ESJK,CLTH,CCQN,CDRQ,IKSQ,CAAC,ELTT,CFMK,AENL,ICQK,CAAC,CLKA,GKLI,CAAC,ALKf,EAAwC,EIbpC,CCQM,ADRS,CCQE,CIChB,CAA6B,CLdE,CCaX,CAAC,GICrB,EAAqC,CJDrB,AIChB,CAAb,IJD6C,aAAa,CAAC,MAAzC,CAAD,CADI;AHAnB,AGAmB,ADNf,AGUF,APGF,ASJF,MAAM,CJHJ,CEIE,ELJE,AENA,CJaC,ESJM,CLTH,AGUA,CAAC,CLJC,AENA,AKSI,GPHD,AKIX,CAAY,CLJd,COGoB,CLTV,AKSW,CLTX,AGUR,MPGF,CAAyB,ESJX,ETIe,CAAC,CSJK,CLTzB,CAAe,IANiB,CKeA,CAAC,ETIlB,CAAiB,CAA1C,EAA6C,IAAI,CAAC,ASJpC,IAA4C,IAAI,CAAC,ITIlB,CAAmB,CAAhE,KSJF;ALRM,AGUH,AEDH,Eb/ByD,Ia+BnD,ILTA,CLOE,EKPC,AKSI,Cb/B4C,CAAA,AQsB9C,CKUT,MLVS,AKUH,CLVG,AKUF,MVHQ,KAAT,AUGN,EVH4B,CKPnB,CAAe,AKUF,ILjBoB,GKiBb,CAAC,YAA9B,IAA8C,IAAI,CAAC,YADrD;APLiB,AGGf,ADNI,AJYJ,ADLA,AUIF,MAAM,ILXA,CJYC,CSDK,CJLH,ANCA,EKPE,AKWI,ELXF,CCMC,ANCA,CUIK,CAAC,ILXP,AKWE,CLXF,AKWY,EJLhB,CAAe,ANCf,CAAgB,CCKvB,CAAyB,CSDK,EVJvB,CCKsB,ASDI,CTCH,ESDjB,CLXF,ALOsB,AUInC,CLX4B,IARgB,ALeJ,GCKb,CAAiB,CEPzB,AFOjB,EAA6C,GEPvB,CFO2B,CAAC,KETnC,CHIkB,CAAwB,KAAxB,CCKY,ADL7C,CCKgE,CAAhE;AETe,AN1BnB,AS6B4B,ADLpB,AGSJ,APGD,ADLA,AUID,MAAM,CbnCR,CAAA,AS6B4B,EDLpB,ECKwB,AIMlB,CFFH,CFJuB,CT7BlC,AQwBa,AKWI,ELXF,CRxBf,AS6BsC,AEItB,CFJuB,AIMlB,CAAC,GJNI,CDLX,AKWE,CLXF,AKWY,OAAO,GFFvB,AEE0B,CFFH,GHTnB,AKWE,CLXa,AKW5B,MFFS,CXjCX,AWiC6C;AFJA,ADdC,AGkBC,AEG7C,QJP2C,AEIE,CHlB7B,AKqBT,IAAI,CFHwC,EAAE,EFJA,EAAE,OIO5C,CAAA,KdtCgC,QcsCpC,CAAkB;APVR,ARdnB,AWiB0B,AD1BH,AG8BsB,AEGhB,IAAA,CAAC,EfxB9B,AWiBW,AD1BA,AG8BA,AEGqB,CfxBhC,AWiBI,AD1BA,AG8BA,KEGuB,EfxB3B,GAAA,uBAAA;AQgBI,AP9BJ,AUgCG,ADHA,AGOA,AEEqC,EZpC0B,EYoC1B,CAAC,EdtCzC,AcsC2C,CdtC3C,GKwCU,ADLA,IJnCV,GAAA,CEEkE,CAAA,WEiC7C,EJnCrB,GImCU,EAAwB,ECKJ,UAApB,EAAwC,OAAxC,CEVyB,CFU8B;AEV9B,AFW/B,ADLA,AUEuB,GAAlB,CAAP,OTGO,EDLE,CGNE,IAAsB,CHMlB,CAAC,OCKd,CAAsB,CDLf,CAAiB,KAAjB,CAAP,ECKA;AEVE,AL7BN,AEmCG,AUEF,CAVD,MZ3BA,CAAA,EK6BM,KL7BN,CK6BY,EL7BZ,EK6BgB,IAAI,CAAC,IAAL,CAAU,EAAV,IAAgB,SAAS,CAAC,QL7B1C,KK6BM;AACD,AFUD,WKRK,AEIC,APID,iBAAL,CAAuB,EKRP,IAAX,AEIgB,EFJe,EEI9B,APIN,EODD;ALbgB,AGOf,AEOA,AEDJ,IAAM,KAAK,CFCD,EEDI,CJNH,IAAI,AEOE,GAAG,CEDd,GFCkB,CAAC,CEDX,CJNC,AIMA,CJNA,GIMD,EAAuB,IJN1B,AEOS,CFPK,AEOa,SAAlB,CAA4B;ALd7B,AGOQ,AEQrB,APAF,ASDF,EAAA,MJPyB,AEQrB,CAAC,CEDG,CFCD,APAA,ADJC,AUGC,GJPsB,CEQpB,CFRsB,AEQrB,IFRyB,CAAC,MEQ/B,CAAiB,CADsB,IEA9C,CAAgC,CTC9B,CAA8B,GDJL,CUG3B,EAAwC,CAAxC,CVHQ,CUGmC,CTCzC,ADJsC,ECII,MSD5C,CTCE,ESDqD,IAAvD;APdiB,AGOM,ADhCzB,AGyCM,APAH,ADJC,AUGH,CAFD,MJNW,ADhCX,CCgCI,ADhCJ,AGyCM,CAAC,EAAE,ERJE,EKrCX,AGyCa,CAAC,EHzCd,ALqCgB,GAAG,CAAf,KQIK,CAAiB,IHzC1B;AFyBmB,AGQhB,AEM6C,ARD7C,OQCiB,CAAhB;ALde,AOiBnB,MAAM;AFCF,UAAM,CPAA,mBOAoB,GAAG,IPAN,COAW,IPA5B,EAA8B,eOAP,CAA2B,IAA3B,CAA7B;ALbA,AFcA,UAAI,CKTE,ALSD,EEdE,IFcI,CAAC,CEdZ,QFcK,CAAiB,EKTN,GLSX,CKTC,ALSN,EKND,ALM+B;AEb/B,AGQC,AEKA,APCE,UKNI,AEKA,IFLI,ALMF,GKNK,CLMD,CODG,EFLE,CEMf,OAAO,CPAG,CAAA,GOAE,CFNG,CAAA,KEMH,CAAA,OFND,CAAkB,IEMjB,CAAa,KAAzB,GACI,IPDE,GOCF,CAAA,OPAC,KADC,EOCF,CAAe,KADnB,GAEI,OAAA,CAAA,KPFJ,SOEI,CAAe,IAHrB;AFLiC,ALShC,QKTgC,CAAC,EAAE,IAAI,CAAC,IAAL,CAAU,CAAf;AAAkB,AESjD,APCD,AD7CH,OAAA,CMmCqD,ANnCrD,CMmCsD,CES5C,CFT8C,IAAI,ANnC5D,CMmC6D,ENnC7D,CQ4CmB,CFTqC,CAAU,CES5C,KAAK,IR5C3B,EQ4CsB,CAAY,gBAAZ,CAChB,SADgB,EAEhB,oBAFgB,CAAlB;AFT+B,OAAlB,CAAb,GHNK,mBAAU,WAAV,EAAkC;AACvC,AGMA,AEYA,UFZM,GHNC,AKkBA,GFZK,EHNA,CGMG,EAAf,CEYgB,GLlBT,CAAa,CKkBC,OAAA,CAAA,ELlBU,CAAC,CAAzB,EAA4B,QKkBd,CAAe,ELlBU,CAAC,CAAxC,CAAP,AKkBO,GACH,OAAA,CAAA,YAAA,CAAa,KADV,GAEH,OAAA,CAAA,YAAA,CAAa,IAFjB;ALjBD,AKoBA,WPJO,2BAAkB,KAAlB,EAA+B;AKVrC,ALWA,UAAI,CKXC,IAAI,ALWA,CKXC,ELWE,CKXC,ALWb,CKXA,CLWe,CKXC,CAAC,GAAG,IAAI,CAAC,CAAzB,EAA4B,CAAC,EAA7B,EAAiC;AAC/B,ALWA,YKXM,ELWA,EKXI,ELWA,CKXG,EAAb,SLWU,CAAA,oCAAJ,WACD,KADC,sBAAN;AAGD,WEnBI,AKoBC,uBLpBa,QKoBS,GLpBvB,CKoBC,CLpBqC,CKuB5C;ALtBC,AGKE,AEkBF,APJD,UEnBO,AKuBA,GFlBC,IAAI,CAAC,EEkBI,CFlBD,CAAb,CEkBiB,CFlBD,CAAC,EEkBI,CLvBC,AGKF,AEkBE,GLvBG,CGKD,CAAC,CAAzB,EHL8B,AGKF,CAAC,EAA7B,CEkBiB,CFlBgB,AEkBE,aAAlB,CAAgC,IAAI,CLvB5B,AKuB6B,CLvBC,UKuBtC,CLvBQ,AKuB3B,CLvBA;AGMI,AEkBJ,aAAO,CFlBG,IAAI,GAAG,EEkBA,CAAC,CFlBG,CAAC,IEkBf,CAAkB,KFlBR,EAAb,GEkBsB,SAAD;ALvBzB,AGMI,AEiBqB,ULvBnB,AGMF,IAAI,CAAC,AEiB+B,IFjBpC,CHNY,AGMF,GHNK,CGMf,AEiB6C,CLvBjD,GKuBqD,OAAA,CAAA,YAAA,CAAa,KAAzC;AFhBtB,AEgBsB,OAAlB,EACJ,EPJG,IOGN,8BPH+B,KAAzB,EAAwC,OAAxC,EAAuD;AEnB7D,AKwBD,APJC,UAAI,CEpBC,IAAI,AFoBA,CEpBC,GAAG,AFoBA,OAAb,EAAsB,SEpBS,CAAC,CAAnB,GAAuB,CAApC,EAAuC,CAAC,GAAG,kBAAkB,CAAC,CAAnB,GAAuB,CAAlE,EAAqE,CAAC,EAAtE,EAA0E;AACxE,AGMA,ALcA,QKdA,KHLE,CGKI,ALcA,CKdC,EHLD,CAAC,AFmBG,CKdV,CAAY,CHLF,GGKV,MLcU,CAAA,QEnBkB,CAAC,CAAnB,GAAuB,CADjC,EAEE,CAAC,GAAG,gBFkBA,EElBkB,CAAC,CAAnB,GAAuB,CAF7B,EAGE,CAAC,AFkBE,EErBL,EAIE,CFgBI,0DACoD,OADpD,OAAN;AEfE,AGEH,ALgBA,cElBO;AACF,AFkBP,gBElBa,oBAAoB,GAAG,KAAK,wBAAL,CAA8B;AACzD,AGCR,aAAO,CHDC,CAAC,EAAE,AGCA,CHFsD,SGEtD,CAAA,SAAJ,CAAc;AHAb,AGAe,QAAA,MHAf,AGAqB,CHApB,CGAsB,CHApB;AAFsD,AGE5C,AEtCzB,OFsCW,AEtCX,CFsCI,AEtCJ,KLoCuC,CAA7B,CKpCV,GAAA,6BAAA;AFuCG;AHCO,gBAAI,CAAC,oBAAoB,CAAC,MAArB,CAA4B,kBAA5B,CAAL,EAAsD;AACpD,AF3CZ,OAAA,CAAA,ME2CY,CF3CZ,GAAA,ME2CsB,CAAC,IAAX,CACE,KAAK,GF5CnB,IE4Cc,CAAa,oBAAoB,CAAC,CAAlC,EAAqC,oBAAoB,CAAC,CAA1D,CADF;AAGD;AACF,WAVD,CAUE,OAAO,KAAP,EAAc;AACd,gBAAI,EAAE,KAAK,YAAY,YAAA,CAAA,oCAAnB,CAAJ,EAA8D;AAC5D,AGxCZ,OAAA,CAAA,OAAA,GAAA,EHwCkB,KAAN,SGxCZ;AHyCW;AACF;AACF;AACF;;AACD,aAAO,UAAP;AACD;;;WAEO,kCACN,WADM,EACkB;AAExB,aAAO,IAAI,cAAA,CAAA,oBAAJ,CAAyB;AAC9B,QAAA,WAAW,EAAE,WADiB;AAE9B,QAAA,aAAa,EAAE;AAAE,UAAA,CAAC,EAAE,KAAK,KAAV;AAAiB,UAAA,CAAC,EAAE,KAAK;AAAzB;AAFe,OAAzB,CAAP;AAID;;;;;;AA/DH,OAAA,CAAA,OAAA,GAAA,SAAA;AACiB,SAAA,CAAA,aAAA,GAAgB,MAAhB","file":"script.221c08a2.js","sourceRoot":"../src/application","sourcesContent":["enum TileStatusEnum {\n  ALIVE = \"ALIVE\",\n  DEAD = \"DEAD\",\n}\nexport default TileStatusEnum;\n","enum TileSignEnum {\n  ALIVE = \"O\",\n  DEAD = \"&nbsp\",\n}\n\nexport default TileSignEnum;\n","import TileStatusEnum from \"./tileStatusEnum\";\nimport TileSignEnum from \"./tileSignEnum\";\n\nexport { TileStatusEnum, TileSignEnum };\n","import { TileStatusEnum } from \"domain/enums\";\nimport RulesForNeighbourCounts from \"./rulesForNeighbourCounts\";\n\ninterface RuleSetParameters {\n  forTheLiving: RulesForNeighbourCounts;\n  forTheDead: RulesForNeighbourCounts;\n}\n\nexport default class RuleSet {\n  private _rules: Map<TileStatusEnum, RulesForNeighbourCounts>;\n\n  constructor(rules: RuleSetParameters) {\n    this._rules = new Map();\n    this._rules.set(TileStatusEnum.ALIVE, rules.forTheLiving);\n    this._rules.set(TileStatusEnum.DEAD, rules.forTheDead);\n  }\n  getNewTileStatus(\n    previousStatus: TileStatusEnum,\n    neighboursCount: number\n  ): TileStatusEnum {\n    const rulesForStatus = this._rules.get(\n      previousStatus\n    ) as RulesForNeighbourCounts;\n    return rulesForStatus.get(neighboursCount);\n  }\n}\n","import { TileStatusEnum } from \"domain/enums\";\n\ninterface RulesForGivenTileStatusParameters {\n  zero: TileStatusEnum;\n  one: TileStatusEnum;\n  two: TileStatusEnum;\n  three: TileStatusEnum;\n  four: TileStatusEnum;\n  five: TileStatusEnum;\n  six: TileStatusEnum;\n  seven: TileStatusEnum;\n  eight: TileStatusEnum;\n}\n\nexport default class RulesForGivenTileStatus {\n  private _rules: Map<number, TileStatusEnum>;\n\n  constructor(rules: RulesForGivenTileStatusParameters) {\n    this._rules = new Map();\n    this._rules.set(0, rules.zero);\n    this._rules.set(1, rules.one);\n    this._rules.set(2, rules.two);\n    this._rules.set(3, rules.three);\n    this._rules.set(4, rules.four);\n    this._rules.set(5, rules.five);\n    this._rules.set(6, rules.six);\n    this._rules.set(7, rules.seven);\n    this._rules.set(8, rules.eight);\n  }\n\n  get(neighboursCount: number): TileStatusEnum {\n    return this._rules.get(neighboursCount) as TileStatusEnum;\n  }\n}\n","export default class DomainException extends Error {}\n","import { DomainException } from \"domain/exceptions\";\n\nexport default class InvalidLandscapeSizeException extends DomainException {\n  constructor(x: number, y: number) {\n    const message = `Must be integers > 0, got X: ${x}; Y: ${y}`;\n    super(message);\n  }\n}\n","import DomainException from \"./domainException\";\n\nexport default class InvalidLandscapeCoordinatesException extends DomainException {}\n","import DomainException from \"./domainException\";\nimport InvalidLandscapeSizeException from \"./invalidLandscapeSizeException\";\nimport InvalidLandscapeCoordinatesException from \"./invalidLandscapeCoordinates\";\n\nexport {\n  DomainException,\n  InvalidLandscapeSizeException,\n  InvalidLandscapeCoordinatesException,\n};\n","import { InvalidLandscapeSizeException } from \"domain/exceptions\";\n\ninterface LandscapeSizeArgs {\n  x: number;\n  y: number;\n}\n\nexport default class LandscapeSize {\n  private _x: number;\n  private _y: number;\n\n  constructor(size: LandscapeSizeArgs) {\n    this._validate(size.x, size.y);\n    this._x = size.x;\n    this._y = size.y;\n  }\n\n  public get x() {\n    return this._x;\n  }\n\n  public get y() {\n    return this._y;\n  }\n\n  private _validate(x: number, y: number) {\n    if (!this._isValid(x) || !this._isValid(y)) {\n      throw new InvalidLandscapeSizeException(x, y);\n    }\n  }\n\n  private _isValid(value: number) {\n    return this._isInteger(value) && this._isGreaterThenZero(value);\n  }\n\n  private _isInteger(value: number) {\n    return Number.isInteger(value);\n  }\n\n  private _isGreaterThenZero(value: number) {\n    return value > 0;\n  }\n}\n","import { InvalidLandscapeCoordinatesException } from \"domain/exceptions\";\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\ninterface LandscapeCoordinatesArgs {\n  coordinates: Coordinates;\n  landscapeSize: Coordinates;\n}\n\nexport default class LandscapeCoordinates {\n  private _x: number;\n  private _y: number;\n\n  constructor(args: LandscapeCoordinatesArgs) {\n    this._validate(args);\n    this._x = args.coordinates.x;\n    this._y = args.coordinates.y;\n  }\n\n  public get x(): number {\n    return this._x;\n  }\n  public get y(): number {\n    return this._y;\n  }\n\n  public equals(landscapeCoordinates: LandscapeCoordinates): boolean {\n    return (\n      landscapeCoordinates.x === this.x && landscapeCoordinates.y === this.y\n    );\n  }\n\n  private _validate(args: LandscapeCoordinatesArgs): void {\n    this._validateCoordinate(args.coordinates.x, args.landscapeSize.x);\n    this._validateCoordinate(args.coordinates.y, args.landscapeSize.y);\n  }\n\n  private _validateCoordinate(coordinate: number, ceiling: number): void {\n    this._validateInteger(coordinate);\n    this._validatePositive(coordinate);\n    this._validateInsideLandscape(coordinate, ceiling);\n  }\n\n  private _validateInteger(value: number): void {\n    if (!Number.isInteger(value)) {\n      throw new InvalidLandscapeCoordinatesException(\n        `${value} is not an integer`\n      );\n    }\n  }\n\n  private _validatePositive(value: number): void {\n    if (value < 0) {\n      throw new InvalidLandscapeCoordinatesException(\n        `${value} is not positive`\n      );\n    }\n  }\n\n  private _validateInsideLandscape(value: number, ceiling: number): void {\n    if (value >= ceiling) {\n      throw new InvalidLandscapeCoordinatesException(\n        `${value} out of landscape range (should be less than ${ceiling})`\n      );\n    }\n  }\n}\n","import LandscapeSize from \"./landscapeSize\";\nimport LandscapeCoordinates from \"./landscapeCoordinates\";\n\nexport { LandscapeSize, LandscapeCoordinates };\n","import { TileSignEnum } from \"domain/enums\";\nimport { InvalidLandscapeCoordinatesException } from \"domain/exceptions\";\nimport { LandscapeCoordinates } from \"domain/valueObjects\";\n\ninterface LandscapeArgs {\n  matrix: TileSignEnum[][];\n}\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport default class Landscape {\n  private static _breakLineTag = \"<br>\";\n  private _matrix: TileSignEnum[][];\n\n  constructor(args: LandscapeArgs) {\n    this._matrix = args.matrix;\n  }\n\n  public get height(): number {\n    return this._matrix.length;\n  }\n  public get width(): number {\n    return this._matrix[0].length;\n  }\n\n  public get asText(): string {\n    let result = \"\";\n    for (let line of this._matrix) {\n      result += line.join(\"\") + Landscape._breakLineTag;\n    }\n    return result;\n  }\n\n  public getCharAt(coordinates: Coordinates): TileSignEnum {\n    return this._matrix[coordinates.y][coordinates.x];\n  }\n\n  public getNeighbours(coordinates: Coordinates): TileSignEnum[] {\n    const centralCoordinates = this._getLandscapeCoordinates(coordinates);\n    const neighbours = [];\n    for (let y = centralCoordinates.y - 1; y < centralCoordinates.y + 2; y++) {\n      for (\n        let x = centralCoordinates.x - 1;\n        x < centralCoordinates.x + 2;\n        x++\n      ) {\n        try {\n          const neighbourCoordinates = this._getLandscapeCoordinates({\n            x: x,\n            y: y,\n          });\n          if (!neighbourCoordinates.equals(centralCoordinates)) {\n            neighbours.push(\n              this._matrix[neighbourCoordinates.y][neighbourCoordinates.x]\n            );\n          }\n        } catch (error) {\n          if (!(error instanceof InvalidLandscapeCoordinatesException)) {\n            throw error;\n          }\n        }\n      }\n    }\n    return neighbours;\n  }\n\n  private _getLandscapeCoordinates(\n    coordinates: Coordinates\n  ): LandscapeCoordinates {\n    return new LandscapeCoordinates({\n      coordinates: coordinates,\n      landscapeSize: { x: this.width, y: this.height },\n    });\n  }\n}\n","import RuleSet from \"./rulesSet\";\nimport RulesForNeighbourCounts from \"./rulesForNeighbourCounts\";\nimport Landscape from \"./landscape\";\n\nexport { RuleSet, RulesForNeighbourCounts, Landscape };\n","import { RuleSet, RulesForNeighbourCounts } from \"domain/entities\";\nimport { TileStatusEnum } from \"domain/enums\";\n\nexport default class RuleSetFactory {\n  buildDefault() {\n    return new RuleSet({\n      forTheLiving: new RulesForNeighbourCounts({\n        zero: TileStatusEnum.DEAD,\n        one: TileStatusEnum.DEAD,\n        two: TileStatusEnum.ALIVE,\n        three: TileStatusEnum.ALIVE,\n        four: TileStatusEnum.DEAD,\n        five: TileStatusEnum.DEAD,\n        six: TileStatusEnum.DEAD,\n        seven: TileStatusEnum.DEAD,\n        eight: TileStatusEnum.DEAD,\n      }),\n      forTheDead: new RulesForNeighbourCounts({\n        zero: TileStatusEnum.DEAD,\n        one: TileStatusEnum.DEAD,\n        two: TileStatusEnum.DEAD,\n        three: TileStatusEnum.ALIVE,\n        four: TileStatusEnum.DEAD,\n        five: TileStatusEnum.DEAD,\n        six: TileStatusEnum.DEAD,\n        seven: TileStatusEnum.DEAD,\n        eight: TileStatusEnum.DEAD,\n      }),\n    });\n  }\n}\n","import { Landscape } from \"domain/entities\";\nimport { TileSignEnum } from \"domain/enums\";\nimport { LandscapeSize } from \"domain/valueObjects\";\n\ninterface BlankArgs {\n  size: SizeArgs;\n}\n\ninterface RandomizedArgs {\n  size: SizeArgs;\n}\n\ninterface FromMatrixArgs {\n  matrix: TileSignEnum[][];\n}\n\ninterface SizeArgs {\n  x: number;\n  y: number;\n}\n\nexport default class LandscapeFactory {\n  public blank(args: BlankArgs): Landscape {\n    const createChar = () => TileSignEnum.DEAD;\n    return this._buildNew({ size: args.size, createChar: createChar });\n  }\n\n  public randomized(args: RandomizedArgs): Landscape {\n    const possibleChars = [TileSignEnum.ALIVE, TileSignEnum.DEAD];\n    const createChar = () =>\n      possibleChars[Math.floor(Math.random() * possibleChars.length)];\n    return this._buildNew({ size: args.size, createChar: createChar });\n  }\n\n  public fromMatrix(args: FromMatrixArgs): Landscape {\n    return new Landscape({ matrix: args.matrix });\n  }\n\n  private _buildNew(args: {\n    size: SizeArgs;\n    createChar: () => TileSignEnum;\n  }): Landscape {\n    const size = new LandscapeSize({ x: args.size.x, y: args.size.y });\n    const matrix = [];\n    for (let y = 0; y < size.y; y++) {\n      const line = [];\n      for (let x = 0; x < size.x; x++) {\n        const char = args.createChar();\n        line.push(char);\n      }\n      matrix.push(line);\n    }\n    return new Landscape({ matrix: matrix });\n  }\n}\n","import RuleSetFactory from \"./ruleSetFactory\";\nimport LandscapeFactory from \"./landscapeFactory\";\n\nexport { RuleSetFactory, LandscapeFactory };\n","import { Landscape, RuleSet } from \"domain/entities\";\nimport { TileSignEnum, TileStatusEnum } from \"domain/enums\";\nimport { LandscapeFactory } from \"domain/factories\";\n\ninterface GenerateNextLandscapeServicesArgs {\n  ruleSet: RuleSet;\n  landscapeFactory: LandscapeFactory;\n}\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport default class GenerateNextLandscapeServices {\n  private _rules: RuleSet;\n  private _landscapeFactory: LandscapeFactory;\n\n  constructor(args: GenerateNextLandscapeServicesArgs) {\n    this._rules = args.ruleSet;\n    this._landscapeFactory = args.landscapeFactory;\n  }\n  public execute(oldLandscape: Landscape): Landscape {\n    const matrix: TileSignEnum[][] = [];\n    for (let x = 0; x < oldLandscape.height; x++) {\n      const line = [];\n      for (let y = 0; y < oldLandscape.width; y++) {\n        const char = this._getFutureChar({\n          coordinates: { x: y, y: x }, //FIX THIS INVERSION\n          oldLandscape: oldLandscape,\n        });\n        line.push(char);\n      }\n      matrix.push(line);\n    }\n    return this._landscapeFactory.fromMatrix({ matrix: matrix });\n  }\n\n  private _getFutureChar(args: {\n    coordinates: Coordinates;\n    oldLandscape: Landscape;\n  }): TileSignEnum {\n    const oldChar = args.oldLandscape.getCharAt({\n      x: args.coordinates.x,\n      y: args.coordinates.y,\n    });\n    const aliveNeighboursCount = this._countAliveNeighbours(args);\n    const oldStatus =\n      oldChar === TileSignEnum.ALIVE\n        ? TileStatusEnum.ALIVE\n        : TileStatusEnum.DEAD;\n    const newStatus = this._rules.getNewTileStatus(\n      oldStatus,\n      aliveNeighboursCount\n    );\n    return newStatus === TileStatusEnum.ALIVE\n      ? TileSignEnum.ALIVE\n      : TileSignEnum.DEAD;\n  }\n\n  private _countAliveNeighbours(args: {\n    coordinates: Coordinates;\n    oldLandscape: Landscape;\n  }): number {\n    const neighbours = args.oldLandscape.getNeighbours(args.coordinates);\n    return neighbours.filter((neighbour) => neighbour == TileSignEnum.ALIVE)\n      .length;\n  }\n}\n","import GenerateNextLandscapeServices from \"./generateNextLandscapeService\";\n\nexport { GenerateNextLandscapeServices };\n","import { Landscape } from \"domain/entities\";\nimport { LandscapeFactory, RuleSetFactory } from \"domain/factories\";\nimport { GenerateNextLandscapeServices } from \"domain/services\";\nimport { LandscapeSize } from \"domain/valueObjects\";\n\nconst runApp = (): void => {\n  const frameTimeoutMS = 50;\n  const ruleSetFactory = new RuleSetFactory();\n  const landscapeFactory = new LandscapeFactory();\n  const generateNextLandscapeService = new GenerateNextLandscapeServices({\n    ruleSet: ruleSetFactory.buildDefault(),\n    landscapeFactory: landscapeFactory,\n  });\n  const landscapeSize = getLandscapeSize();\n  const initialLandscape = landscapeFactory.randomized({\n    size: { x: landscapeSize.x, y: landscapeSize.y },\n  });\n\n  const runFrames = (landscape: Landscape) => {\n    print(landscape.asText);\n    const nextLandscape = generateNextLandscapeService.execute(landscape);\n    setTimeout(() => {\n      runFrames(nextLandscape);\n    }, frameTimeoutMS);\n  };\n\n  runFrames(initialLandscape);\n};\n\nconst getLandscapeSize = (): LandscapeSize => {\n  const element = document.documentElement;\n  const body = element.getElementsByTagName(\"body\")[0];\n  const pixelsX = window.innerWidth || element.clientWidth || body.clientWidth;\n  const pixelsY =\n    window.innerHeight || element.clientHeight || body.clientHeight;\n\n  const charsX = Math.ceil(pixelsX / 7.2);\n  const charsY = Math.ceil(pixelsY / 14.2);\n  return new LandscapeSize({ x: charsX, y: charsY });\n};\n\nconst print = (text: string): void => {\n  document.getElementsByClassName(\"main\")[0].innerHTML = text;\n};\n\nrunApp();\n"]}