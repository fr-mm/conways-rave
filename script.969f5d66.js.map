{"version":3,"sources":["../domain/enums/tileStatusEnum.ts","../domain/enums/tileSignEnum.ts","../domain/enums/index.ts","../domain/entities/rulesSet.ts","../domain/entities/rulesForNeighbourCounts.ts","../domain/exceptions/domainException.ts","../domain/exceptions/invalidLandscapeSizeException.ts","../domain/exceptions/invalidLandscapeCoordinates.ts","../domain/exceptions/index.ts","../domain/valueObjects/landscapeSize.ts","../domain/valueObjects/landscapeCoordinates.ts","../domain/valueObjects/index.ts","../domain/entities/landscape.ts","../domain/entities/index.ts","../domain/factories/ruleSetFactory.ts","../domain/factories/landscapeFactory.ts","../domain/factories/index.ts","../domain/services/generateNextLandscapeService.ts","../domain/services/index.ts","script.ts"],"names":[],"mappings":"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","file":"script.969f5d66.js","sourceRoot":"../src/application","sourcesContent":["enum TileStatusEnum {\n  ALIVE = \"ALIVE\",\n  DEAD = \"DEAD\",\n}\nexport default TileStatusEnum;\n","enum TileSignEnum {\n  ALIVE = \"O\",\n  DEAD = \"&nbsp\",\n}\n\nexport default TileSignEnum;\n","import TileStatusEnum from \"./tileStatusEnum\";\nimport TileSignEnum from \"./tileSignEnum\";\n\nexport { TileStatusEnum, TileSignEnum };\n","import { TileStatusEnum } from \"domain/enums\";\nimport RulesForNeighbourCounts from \"./rulesForNeighbourCounts\";\n\ninterface RuleSetParameters {\n  forTheLiving: RulesForNeighbourCounts;\n  forTheDead: RulesForNeighbourCounts;\n}\n\nexport default class RuleSet {\n  private _rules: Map<TileStatusEnum, RulesForNeighbourCounts>;\n\n  constructor(rules: RuleSetParameters) {\n    this._rules = new Map();\n    this._rules.set(TileStatusEnum.ALIVE, rules.forTheLiving);\n    this._rules.set(TileStatusEnum.DEAD, rules.forTheDead);\n  }\n  getNewTileStatus(\n    previousStatus: TileStatusEnum,\n    neighboursCount: number\n  ): TileStatusEnum {\n    const rulesForStatus = this._rules.get(\n      previousStatus\n    ) as RulesForNeighbourCounts;\n    return rulesForStatus.get(neighboursCount);\n  }\n}\n","import { TileStatusEnum } from \"domain/enums\";\n\ninterface RulesForGivenTileStatusParameters {\n  zero: TileStatusEnum;\n  one: TileStatusEnum;\n  two: TileStatusEnum;\n  three: TileStatusEnum;\n  four: TileStatusEnum;\n  five: TileStatusEnum;\n  six: TileStatusEnum;\n  seven: TileStatusEnum;\n  eight: TileStatusEnum;\n}\n\nexport default class RulesForGivenTileStatus {\n  private _rules: Map<number, TileStatusEnum>;\n\n  constructor(rules: RulesForGivenTileStatusParameters) {\n    this._rules = new Map();\n    this._rules.set(0, rules.zero);\n    this._rules.set(1, rules.one);\n    this._rules.set(2, rules.two);\n    this._rules.set(3, rules.three);\n    this._rules.set(4, rules.four);\n    this._rules.set(5, rules.five);\n    this._rules.set(6, rules.six);\n    this._rules.set(7, rules.seven);\n    this._rules.set(8, rules.eight);\n  }\n\n  get(neighboursCount: number): TileStatusEnum {\n    return this._rules.get(neighboursCount) as TileStatusEnum;\n  }\n}\n","export default class DomainException extends Error {}\n","import { DomainException } from \"domain/exceptions\";\n\nexport default class InvalidLandscapeSizeException extends DomainException {\n  constructor(x: number, y: number) {\n    const message = `Must be integers > 0, got X: ${x}; Y: ${y}`;\n    super(message);\n  }\n}\n","import DomainException from \"./domainException\";\n\nexport default class InvalidLandscapeCoordinatesException extends DomainException {}\n","import DomainException from \"./domainException\";\nimport InvalidLandscapeSizeException from \"./invalidLandscapeSizeException\";\nimport InvalidLandscapeCoordinatesException from \"./invalidLandscapeCoordinates\";\n\nexport {\n  DomainException,\n  InvalidLandscapeSizeException,\n  InvalidLandscapeCoordinatesException,\n};\n","import { InvalidLandscapeSizeException } from \"domain/exceptions\";\n\ninterface LandscapeSizeArgs {\n  x: number;\n  y: number;\n}\n\nexport default class LandscapeSize {\n  private _x: number;\n  private _y: number;\n\n  constructor(size: LandscapeSizeArgs) {\n    this._validate(size.x, size.y);\n    this._x = size.x;\n    this._y = size.y;\n  }\n\n  public get x() {\n    return this._x;\n  }\n\n  public get y() {\n    return this._y;\n  }\n\n  private _validate(x: number, y: number) {\n    if (!this._isValid(x) || !this._isValid(y)) {\n      throw new InvalidLandscapeSizeException(x, y);\n    }\n  }\n\n  private _isValid(value: number) {\n    return this._isInteger(value) && this._isGreaterThenZero(value);\n  }\n\n  private _isInteger(value: number) {\n    return Number.isInteger(value);\n  }\n\n  private _isGreaterThenZero(value: number) {\n    return value > 0;\n  }\n}\n","import { InvalidLandscapeCoordinatesException } from \"domain/exceptions\";\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\ninterface LandscapeCoordinatesArgs {\n  coordinates: Coordinates;\n  landscapeSize: Coordinates;\n}\n\nexport default class LandscapeCoordinates {\n  private _x: number;\n  private _y: number;\n\n  constructor(args: LandscapeCoordinatesArgs) {\n    this._validate(args);\n    this._x = args.coordinates.x;\n    this._y = args.coordinates.y;\n  }\n\n  public get x(): number {\n    return this._x;\n  }\n  public get y(): number {\n    return this._y;\n  }\n\n  public equals(landscapeCoordinates: LandscapeCoordinates): boolean {\n    return (\n      landscapeCoordinates.x === this.x && landscapeCoordinates.y === this.y\n    );\n  }\n\n  private _validate(args: LandscapeCoordinatesArgs): void {\n    this._validateCoordinate(args.coordinates.x, args.landscapeSize.x);\n    this._validateCoordinate(args.coordinates.y, args.landscapeSize.y);\n  }\n\n  private _validateCoordinate(coordinate: number, ceiling: number): void {\n    this._validateInteger(coordinate);\n    this._validatePositive(coordinate);\n    this._validateInsideLandscape(coordinate, ceiling);\n  }\n\n  private _validateInteger(value: number): void {\n    if (!Number.isInteger(value)) {\n      throw new InvalidLandscapeCoordinatesException(\n        `${value} is not an integer`\n      );\n    }\n  }\n\n  private _validatePositive(value: number): void {\n    if (value < 0) {\n      throw new InvalidLandscapeCoordinatesException(\n        `${value} is not positive`\n      );\n    }\n  }\n\n  private _validateInsideLandscape(value: number, ceiling: number): void {\n    if (value >= ceiling) {\n      throw new InvalidLandscapeCoordinatesException(\n        `${value} out of landscape range (should be less than ${ceiling})`\n      );\n    }\n  }\n}\n","import LandscapeSize from \"./landscapeSize\";\nimport LandscapeCoordinates from \"./landscapeCoordinates\";\n\nexport { LandscapeSize, LandscapeCoordinates };\n","import { TileSignEnum } from \"domain/enums\";\nimport { InvalidLandscapeCoordinatesException } from \"domain/exceptions\";\nimport { LandscapeCoordinates } from \"domain/valueObjects\";\n\ninterface LandscapeArgs {\n  matrix: TileSignEnum[][];\n}\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport default class Landscape {\n  private static _breakLineTag = \"<br>\";\n  private _matrix: TileSignEnum[][];\n\n  constructor(args: LandscapeArgs) {\n    this._matrix = args.matrix;\n  }\n\n  public get height(): number {\n    return this._matrix.length;\n  }\n  public get width(): number {\n    return this._matrix[0].length;\n  }\n\n  public get asText(): string {\n    let result = \"\";\n    for (let line of this._matrix) {\n      result += line.join(\"\") + Landscape._breakLineTag;\n    }\n    return result;\n  }\n\n  public getCharAt(coordinates: Coordinates): TileSignEnum {\n    return this._matrix[coordinates.y][coordinates.x];\n  }\n\n  public getNeighbours(coordinates: Coordinates): TileSignEnum[] {\n    const centralCoordinates = this._getLandscapeCoordinates(coordinates);\n    const neighbours = [];\n    for (let y = centralCoordinates.y - 1; y < centralCoordinates.y + 2; y++) {\n      for (\n        let x = centralCoordinates.x - 1;\n        x < centralCoordinates.x + 2;\n        x++\n      ) {\n        try {\n          const neighbourCoordinates = this._getLandscapeCoordinates({\n            x: x,\n            y: y,\n          });\n          if (!neighbourCoordinates.equals(centralCoordinates)) {\n            neighbours.push(\n              this._matrix[neighbourCoordinates.y][neighbourCoordinates.x]\n            );\n          }\n        } catch (error) {\n          if (!(error instanceof InvalidLandscapeCoordinatesException)) {\n            throw error;\n          }\n        }\n      }\n    }\n    return neighbours;\n  }\n\n  private _getLandscapeCoordinates(\n    coordinates: Coordinates\n  ): LandscapeCoordinates {\n    return new LandscapeCoordinates({\n      coordinates: coordinates,\n      landscapeSize: { x: this.width, y: this.height },\n    });\n  }\n}\n","import RuleSet from \"./rulesSet\";\nimport RulesForNeighbourCounts from \"./rulesForNeighbourCounts\";\nimport Landscape from \"./landscape\";\n\nexport { RuleSet, RulesForNeighbourCounts, Landscape };\n","import { RuleSet, RulesForNeighbourCounts } from \"domain/entities\";\nimport { TileStatusEnum } from \"domain/enums\";\n\nexport default class RuleSetFactory {\n  buildDefault() {\n    return new RuleSet({\n      forTheLiving: new RulesForNeighbourCounts({\n        zero: TileStatusEnum.DEAD,\n        one: TileStatusEnum.DEAD,\n        two: TileStatusEnum.ALIVE,\n        three: TileStatusEnum.ALIVE,\n        four: TileStatusEnum.DEAD,\n        five: TileStatusEnum.DEAD,\n        six: TileStatusEnum.DEAD,\n        seven: TileStatusEnum.DEAD,\n        eight: TileStatusEnum.DEAD,\n      }),\n      forTheDead: new RulesForNeighbourCounts({\n        zero: TileStatusEnum.DEAD,\n        one: TileStatusEnum.DEAD,\n        two: TileStatusEnum.DEAD,\n        three: TileStatusEnum.ALIVE,\n        four: TileStatusEnum.DEAD,\n        five: TileStatusEnum.DEAD,\n        six: TileStatusEnum.DEAD,\n        seven: TileStatusEnum.DEAD,\n        eight: TileStatusEnum.DEAD,\n      }),\n    });\n  }\n}\n","import { Landscape } from \"domain/entities\";\nimport { TileSignEnum } from \"domain/enums\";\nimport { LandscapeSize } from \"domain/valueObjects\";\n\ninterface BlankArgs {\n  size: SizeArgs;\n}\n\ninterface RandomizedArgs {\n  size: SizeArgs;\n}\n\ninterface FromMatrixArgs {\n  matrix: TileSignEnum[][];\n}\n\ninterface SizeArgs {\n  x: number;\n  y: number;\n}\n\nexport default class LandscapeFactory {\n  public blank(args: BlankArgs): Landscape {\n    const createChar = () => TileSignEnum.DEAD;\n    return this._buildNew({ size: args.size, createChar: createChar });\n  }\n\n  public randomized(args: RandomizedArgs): Landscape {\n    const possibleChars = [TileSignEnum.ALIVE, TileSignEnum.DEAD];\n    const createChar = () =>\n      possibleChars[Math.floor(Math.random() * possibleChars.length)];\n    return this._buildNew({ size: args.size, createChar: createChar });\n  }\n\n  public fromMatrix(args: FromMatrixArgs): Landscape {\n    return new Landscape({ matrix: args.matrix });\n  }\n\n  private _buildNew(args: {\n    size: SizeArgs;\n    createChar: () => TileSignEnum;\n  }): Landscape {\n    const size = new LandscapeSize({ x: args.size.x, y: args.size.y });\n    const matrix = [];\n    for (let y = 0; y < size.y; y++) {\n      const line = [];\n      for (let x = 0; x < size.x; x++) {\n        const char = args.createChar();\n        line.push(char);\n      }\n      matrix.push(line);\n    }\n    return new Landscape({ matrix: matrix });\n  }\n}\n","import RuleSetFactory from \"./ruleSetFactory\";\nimport LandscapeFactory from \"./landscapeFactory\";\n\nexport { RuleSetFactory, LandscapeFactory };\n","import { Landscape, RuleSet } from \"domain/entities\";\nimport { TileSignEnum, TileStatusEnum } from \"domain/enums\";\nimport { LandscapeFactory } from \"domain/factories\";\n\ninterface GenerateNextLandscapeServicesArgs {\n  ruleSet: RuleSet;\n  landscapeFactory: LandscapeFactory;\n}\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport default class GenerateNextLandscapeServices {\n  private _rules: RuleSet;\n  private _landscapeFactory: LandscapeFactory;\n\n  constructor(args: GenerateNextLandscapeServicesArgs) {\n    this._rules = args.ruleSet;\n    this._landscapeFactory = args.landscapeFactory;\n  }\n  public execute(oldLandscape: Landscape): Landscape {\n    const matrix: TileSignEnum[][] = [];\n    for (let x = 0; x < oldLandscape.height; x++) {\n      const line = [];\n      for (let y = 0; y < oldLandscape.width; y++) {\n        const char = this._getFutureChar({\n          coordinates: { x: y, y: x }, //FIX THIS INVERSION\n          oldLandscape: oldLandscape,\n        });\n        line.push(char);\n      }\n      matrix.push(line);\n    }\n    return this._landscapeFactory.fromMatrix({ matrix: matrix });\n  }\n\n  private _getFutureChar(args: {\n    coordinates: Coordinates;\n    oldLandscape: Landscape;\n  }): TileSignEnum {\n    const oldChar = args.oldLandscape.getCharAt({\n      x: args.coordinates.x,\n      y: args.coordinates.y,\n    });\n    const aliveNeighboursCount = this._countAliveNeighbours(args);\n    const oldStatus =\n      oldChar === TileSignEnum.ALIVE\n        ? TileStatusEnum.ALIVE\n        : TileStatusEnum.DEAD;\n    const newStatus = this._rules.getNewTileStatus(\n      oldStatus,\n      aliveNeighboursCount\n    );\n    return newStatus === TileStatusEnum.ALIVE\n      ? TileSignEnum.ALIVE\n      : TileSignEnum.DEAD;\n  }\n\n  private _countAliveNeighbours(args: {\n    coordinates: Coordinates;\n    oldLandscape: Landscape;\n  }): number {\n    const neighbours = args.oldLandscape.getNeighbours(args.coordinates);\n    return neighbours.filter((neighbour) => neighbour == TileSignEnum.ALIVE)\n      .length;\n  }\n}\n","import GenerateNextLandscapeServices from \"./generateNextLandscapeService\";\n\nexport { GenerateNextLandscapeServices };\n","import { Landscape } from \"domain/entities\";\nimport { LandscapeFactory, RuleSetFactory } from \"domain/factories\";\nimport { GenerateNextLandscapeServices } from \"domain/services\";\nimport { LandscapeSize } from \"domain/valueObjects\";\n\nconst runApp = (): void => {\n  const frameTimeoutMS = 50;\n  const ruleSetFactory = new RuleSetFactory();\n  const landscapeFactory = new LandscapeFactory();\n  const generateNextLandscapeService = new GenerateNextLandscapeServices({\n    ruleSet: ruleSetFactory.buildDefault(),\n    landscapeFactory: landscapeFactory,\n  });\n  const landscapeSize = getLandscapeSize();\n  const initialLandscape = landscapeFactory.randomized({\n    size: { x: landscapeSize.x, y: landscapeSize.y },\n  });\n\n  const runFrames = (landscape: Landscape) => {\n    print(landscape.asText);\n    const nextLandscape = generateNextLandscapeService.execute(landscape);\n    setTimeout(() => {\n      runFrames(nextLandscape);\n    }, frameTimeoutMS);\n  };\n\n  runFrames(initialLandscape);\n};\n\nconst getLandscapeSize = (): LandscapeSize => {\n  const element = document.documentElement;\n  const body = element.getElementsByTagName(\"body\")[0];\n  const pixelsX = window.innerWidth || element.clientWidth || body.clientWidth;\n  const pixelsY =\n    window.innerHeight || element.clientHeight || body.clientHeight;\n\n  const charsX = Math.ceil(pixelsX / 7.2);\n  const charsY = Math.ceil(pixelsY / 14.2);\n  return new LandscapeSize({ x: charsX, y: charsY });\n};\n\nconst print = (text: string): void => {\n  document.getElementsByClassName(\"main\")[0].innerHTML = text;\n};\n\nrunApp();\n"]}